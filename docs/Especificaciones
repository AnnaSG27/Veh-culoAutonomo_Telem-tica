# Protocolo de Telemetría del Vehículo Autónomo (VTAP)
## Vehicle Telemetry Application Protocol

### 1. Visión General del Protocolo

**Propósito:** Permitir la comunicación entre un vehículo autónomo y múltiples clientes para el intercambio de datos de telemetría y comandos de control.

**Modelo de Funcionamiento:** Cliente-Servidor híbrido
- Servidor: Vehículo autónomo (puerto configurable)
- Clientes: Usuarios administradores y observadores
- Arquitectura: Capa de aplicación sobre TCP/IP

**Características:**
- Comunicación bidireccional
- Soporte para múltiples clientes simultáneos
- Autenticación basada en tokens
- Transmisión periódica de telemetría
- Control de comandos en tiempo real

### 2. Especificación del Servicio

#### 2.1 Primitivas del Servicio

**Para Clientes:**
- `CONNECT`: Establecer conexión con el servidor
- `AUTH`: Autenticar usuario (admin/observer)
- `SUBSCRIBE`: Suscribirse a datos de telemetría
- `COMMAND`: Enviar comando de control (solo admin)
- `LIST_USERS`: Listar usuarios conectados (solo admin)
- `DISCONNECT`: Terminar conexión

**Para Servidor:**
- `ACCEPT`: Aceptar nueva conexión
- `BROADCAST_TELEMETRY`: Enviar telemetría a todos los clientes
- `PROCESS_COMMAND`: Procesar comando recibido
- `UPDATE_CLIENT_LIST`: Actualizar lista de clientes conectados

#### 2.2 Tipos de Usuario
- **Administrador**: Puede enviar comandos y consultar usuarios
- **Observador**: Solo recibe datos de telemetría

### 3. Formato de Mensajes

#### 3.1 Estructura General
```
[TIPO_MENSAJE]|[TIMESTAMP]|[TOKEN]|[DATOS]|[CHECKSUM]
```

#### 3.2 Tipos de Mensajes

**AUTH_REQUEST (Cliente → Servidor)**
```
AUTH_REQUEST|[timestamp]|NULL|[username]:[password]|[checksum]
```

**AUTH_RESPONSE (Servidor → Cliente)**
```
AUTH_RESPONSE|[timestamp]|[token]|[user_type]:[status]|[checksum]
```

**TELEMETRY (Servidor → Cliente)**
```
TELEMETRY|[timestamp]|NULL|[speed]:[battery]:[temperature]:[direction]:[latitude]:[longitude]|[checksum]
```

**COMMAND_REQUEST (Cliente → Servidor)**
```
COMMAND_REQUEST|[timestamp]|[admin_token]|[command]:[parameters]|[checksum]
```

**COMMAND_RESPONSE (Servidor → Cliente)**
```
COMMAND_RESPONSE|[timestamp]|NULL|[status]:[message]|[checksum]
```

**LIST_USERS_REQUEST (Cliente → Servidor)**
```
LIST_USERS_REQUEST|[timestamp]|[admin_token]|NULL|[checksum]
```

**LIST_USERS_RESPONSE (Servidor → Cliente)**
```
LIST_USERS_RESPONSE|[timestamp]|NULL|[user_count]:[user_list]|[checksum]
```

#### 3.3 Campos del Protocolo

| Campo | Tamaño | Descripción |
|-------|--------|-------------|
| TIPO_MENSAJE | Variable | Identifica el tipo de mensaje |
| TIMESTAMP | 10 bytes | Timestamp Unix |
| TOKEN | 32 bytes | Token de autenticación (NULL si no aplica) |
| DATOS | Variable | Payload del mensaje |
| CHECKSUM | 8 bytes | Verificación de integridad |

### 4. Comandos Disponibles

#### 4.1 Comandos de Movimiento
- `SPEED_UP`: Incrementar velocidad
- `SLOW_DOWN`: Decrementar velocidad  
- `TURN_LEFT`: Girar a la izquierda
- `TURN_RIGHT`: Girar a la derecha
- `STOP`: Detener vehículo
- `START`: Iniciar movimiento

#### 4.2 Parámetros de Comandos
```
SPEED_UP:[increment_value]
SLOW_DOWN:[decrement_value]
TURN_LEFT:[degrees]
TURN_RIGHT:[degrees]
```

### 5. Reglas de Procedimiento

#### 5.1 Establecimiento de Conexión
```
Cliente                    Servidor
   |                          |
   |-------- CONNECT -------->|
   |<--- CONNECTION_ACK ------|
   |                          |
   |---- AUTH_REQUEST ------->|
   |<--- AUTH_RESPONSE -------|
   |                          |
   |--- SUBSCRIBE_TELEMETRY ->|
   |<--- SUBSCRIPTION_ACK ----|
```

#### 5.2 Flujo de Telemetría
```
Cliente                    Servidor
   |                          |
   |                          |-- Timer cada 10s
   |<----- TELEMETRY ---------|
   |                          |
   |<----- TELEMETRY ---------|
   |                          |
```

#### 5.3 Flujo de Comandos
```
Admin                     Servidor
   |                          |
   |---- COMMAND_REQUEST ---->|
   |                          |-- Validar token
   |                          |-- Ejecutar comando
   |<--- COMMAND_RESPONSE ----|
   |                          |
```

#### 5.4 Manejo de Errores

**Códigos de Estado:**
- `200`: OK - Operación exitosa
- `401`: Unauthorized - Token inválido
- `403`: Forbidden - Operación no permitida
- `400`: Bad Request - Formato de mensaje incorrecto
- `500`: Internal Error - Error interno del servidor
- `503`: Service Unavailable - Servicio no disponible

**Mensajes de Error:**
```
ERROR|[timestamp]|NULL|[error_code]:[error_message]|[checksum]
```

### 6. Seguridad

#### 6.1 Autenticación
- Tokens generados por el servidor tras autenticación exitosa
- Tokens únicos por sesión
- Expiración de tokens después de inactividad

#### 6.2 Autorización
- Validación de permisos por tipo de usuario
- Comandos restringidos solo para administradores

### 7. Implementación de Transporte

#### 7.1 Protocolo de Transporte
- **TCP**: Para comandos y autenticación (confiabilidad requerida)
- **UDP**: Para telemetría (velocidad prioritaria)

#### 7.2 Puertos
- Puerto TCP: Configurable (parámetro del servidor)
- Puerto UDP: TCP_PORT + 1

### 8. Ejemplos de Implementación

#### 8.1 Secuencia de Autenticación
```
C: AUTH_REQUEST|1634567890|NULL|admin:password123|A1B2C3D4
S: AUTH_RESPONSE|1634567890|9F8E7D6C5B4A3918|ADMIN:200|E5F6A7B8

C: AUTH_REQUEST|1634567891|NULL|observer:pass456|B2C3D4E5  
S: AUTH_RESPONSE|1634567891|1A2B3C4D5E6F7890|OBSERVER:200|F6A7B8C9
```

#### 8.2 Secuencia de Telemetría
```
S: TELEMETRY|1634567900|NULL|45.5:78.2:25.1:NORTH:40.7128:-74.0060|C4D5E6F7
S: TELEMETRY|1634567910|NULL|47.1:77.8:25.3:NORTHEAST:40.7130:-74.0058|D5E6F7A8
```

#### 8.3 Secuencia de Comando
```
C: COMMAND_REQUEST|1634567920|9F8E7D6C5B4A3918|SPEED_UP:10|A8B9C0D1
S: COMMAND_RESPONSE|1634567920|NULL|200:Speed increased to 55.5 km/h|B9C0D1E2

C: COMMAND_REQUEST|1634567930|9F8E7D6C5B4A3918|TURN_LEFT:45|C0D1E2F3
S: COMMAND_RESPONSE|1634567930|NULL|200:Turning left 45 degrees|D1E2F3A4
```

### 9. Consideraciones de Implementación

#### 9.1 Concurrencia
- Un hilo principal para aceptar conexiones
- Un hilo por cliente conectado
- Hilo dedicado para broadcast de telemetría
- Mutex para proteger estructuras compartidas

#### 9.2 Logging
- Formato: `[TIMESTAMP] [CLIENT_IP:PORT] [REQUEST/RESPONSE] [MESSAGE]`
- Registro en consola y archivo
- Rotación de logs por tamaño

#### 9.3 Configuración
- Puerto TCP configurable
- Intervalo de telemetría configurable
- Credenciales de administrador en archivo de configuración